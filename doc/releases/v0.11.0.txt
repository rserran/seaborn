
v0.11.0 (Unreleased)
--------------------

- TODO stub for explaining improvements to variable specificiation. Make this good!  GH2017

- TODO stub for enforced keyword-only arguments for most parameters of most functions and classes.  GH2052, GH2081

Modernization of distribution functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Completely overhauled :func:`kdeplot` and :func:`rugplot`. Two of the oldest functions in the library, these lacked aspects of the otherwise-common seaborn API, such as the ability to assign variables by name from a ``data`` object; they had no capacity for semantic mapping; and they had numerous other inconsistencies and smaller issues.

The new functions now share a common API with the rest of seaborn, can show conditional distributions by mapping a third variable with a ``hue`` semantic, have been improved in numerous other ways. The `github pull request (GH2104) <https://github.com/mwaskom/seaborn/pull/2104>`_ has a longer explanation of the changes and the motivation behind them.

This is a necessarily API-breaking change. The parameter names for the positional variables
are now ``x`` and ``y``, and the old names have been deprecated. Efforts were made to handle and warn when using the deprecated API, but it is strongly suggested to check your plots carefully.

Additionally, the optional statsmodels-based computation of the KDE has been removed. Because there were some inconsistencies between the way different parameters (specifically, ``bw``, ``clip``, and ``cut``) were implemented by each backend, this may cause plots to look different after an upgrade. Support for using non-Gaussian kernels, which was available only in the statsmodels backend, has been removed. Support for drawing a cumulative distribution function, which was not previously available with the scipy backend, has been added, including for bivariate densities.

Other new features include:

- Several options for representing multiple densities from subsets of data defined by semantic variables (with the new ``multiple`` and ``common_norm`` parameters)
- Weighted KDE (using the new ``weights=`` parameter)
- Better control over the smoothing bandwidth (using the new ``bw_adjust`` parameter)
- More meaningful and configurable selection of the contours that represent a bivariate density (using the new ``thresh`` and ``levels`` parameters)
- Log-space density estimation (using the new ``log_scale`` parameter, or by scaling the data axis before plotting)
- "Bivariate" rug plots with a single function call (by assigning both ``x`` and ``y``)

GH2060, GH2104

Other
~~~~~

- Plots with a ``style`` semantic can now generate an infinite number of unique dashes and/or markers by default. Prevously, an error would be raised if the ``style`` variable had more levels than could be mapped using the default lists. The existing defaults were slightly modified as part of this change; if you need to exactly reproduce plots from earlier versions, refer to the `old defaults <https://github.com/mwaskom/seaborn/blob/v0.10.1/seaborn/relational.py#L24>`_. GH2075

- Fixed a few issues with :func:`boxenplot` regarding the way the number of boxes are calculated. `k_depth="tukey"` is now the default boxes calculation method as the previous default (`"proportion"`) produces too many boxes when datasets are small. Added the option to specify the desired number of boxes as a scalar (e.g. `k_depth=6`) or just plot boxes that will cover most of the data points (with `k_depth="full"`). Added a new parameter `trust_alpha` to control the number of boxes when `k_depth="trustworthy"`. GH2086, GH2118, GH803

- The visual appearance of :func:`boxenplot` now more resembles that of :func:`boxplot`.

- Fixed a bug where elements of :func:`boxenplot` were sometimes not entirely visible. GH2085

- Following its deprecation, `lvplot` has finally been removed from the codebase.

- Added a ``tight_layout`` method to :class:`FacetGrid` and :class:`PairGrid`, which runs the :func:`matplotlib.pyplot.tight_layout` algorithm without interference from the external legend. GH2073

- Changed how :func:`scatterplot` sets the default linewidth for the edges of the scatter points. New behaviot is to scale with the point sizes themselves (on a plot-wise, not point-wise basis). This change also slightly reduces the default width when point sizes are not varied. Set ``linewidth=0.75`` to repoduce the previous behavior. GH2078

- Adapted to a change in matplotlib that prevented passing vectors of literal values to ``c`` and ``s`` in :func:`scatterplot`.  GH2079

- Added an explicit warning in :func:`swarmplot` when more than 2% of the points are overlap in the "gutters" of the swarm. GH2045

- Added the ``axes_dict`` attribute to :class:`FacetGrid` for named access to the component axes.  GH2046

- Made :meth:`FacetGrid.set_axis_labels` clear labels from "interior" axes.  GH2046

- Improved :meth:`FacetGrid.set_titles` with `margin titles=True`, such that texts representing the original row titles are removed before adding new ones. GH2083

- Fixed a bug where :func:`lineplot` did not pass the ``linestyle`` parameter down to matplotlib. GH2095

- Changed how functions that use different representations for numeric and categorical data handle vectors with an `object` data type. Previously, data was considered numeric if it could be coerced to a float representation without error. Now, object-typed vectors are considered numeric only when their contents are themselves numeric. As a consequence, numbers that are encoded as strings will now be treated as categorical data.  GH2084

- Improved the error messages produced when categorical plots process the orientation parameter.

- Deprecated the ``axlabel`` function; use ``ax.set(xlabel=, ylabel=)`` instead.

- Deprecated the ``iqr`` function; use :func:`scipy.stats.iqr` instead.
